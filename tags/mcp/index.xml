<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MCP on 元视角</title><link>https://blog.yuanpei.me/tags/mcp/</link><description>Recent content in MCP on 元视角</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 15 Jun 2025 13:12:22 +0000</lastBuildDate><atom:link href="https://blog.yuanpei.me/tags/mcp/index.xml" rel="self" type="application/rss+xml"/><item><title>微博 × MCP：社交媒体新玩法解锁</title><link>https://blog.yuanpei.me/posts/mcp-server-weibo-beginners-journey/</link><pubDate>Sun, 15 Jun 2025 13:12:22 +0000</pubDate><guid>https://blog.yuanpei.me/posts/mcp-server-weibo-beginners-journey/</guid><description>去年，国外的 “毒舌” AI 应用 Twitter Personality 火爆一时。受其启发，博主跟风开发了一款类似的产品——微博性格报告，其核心功能是借助提示工程，从多个维度分析用户画像。从推特到微博，“数字世界的万花筒，每个社交平台都映照出你灵魂的不同切面”。我心目中的 AI，或许更像一面镜子，正试图从不同视角去观察人类的言行举止。然而，好景不长，后来微博上陆续出现了类似 “评论罗伯特”、“怼怼模拟器” 这类账号，因其学习成本更低、互动性更强，我的产品最终败北。再后来，该产品的代码变成了我 Agent 中的插件，而随着 MCP 协议的持续爆火，我终于将其以一个 MCP 服务器的形式再次推出，而这便是我今天想和大家分享的项目：mcp-server-weibo，这是一个基于 Model Context Protocol 的服务器，可以让大模型获取用户、微博、话题、评论等信息。
微博性格报告 @孙燕姿的微博性格报告 核心功能 作为一款针对微博的 MCP 服务器，目前 mcp-server-weibo 提供了下面 7 个工具：
名称 描述 备注 search_users 搜索微博用户 使用关键词搜索，可设置 limit 参数 get_profile 获取用户信息 使用用户唯一标识 uid get_feeds 获取用户动态 使用用户唯一标识 uid，可设置 limit 参数 get_trendings 获取微博热搜 可设置 limit 参数 search_content 搜索微博内容 使用关键词搜索，可设置 limit 和 page 参数 search_topics 搜索微博话题 使用关键词搜索，可设置 limit 和 page 参数 get_comments 获取指定微博下的评论 使用动态唯一标识 feed_id, 可设置 page 参数 使用方法 mcp-server-weibo 支持 stdio 和 streamable-http，可在以下支持 MCP 协议的客户端中使用：VS Code、Cursor、Windsurf、Cherry Studio、ChatWise、Claude Desktop 等等。使用方法如下：</description></item><item><title>Semantic Kernel × MCP：智能体的上下文增强探索</title><link>https://blog.yuanpei.me/posts/semantic-kernel-mcp-agent-context-enhanced-exploration/</link><pubDate>Sun, 09 Mar 2025 20:42:23 +0000</pubDate><guid>https://blog.yuanpei.me/posts/semantic-kernel-mcp-agent-context-enhanced-exploration/</guid><description>时光飞逝，转眼间已步入阳春三月，可我却迟迟未曾动笔写下 2025 年的第一篇 AI 博客。不知大家心中作何感想，从年初 DeepSeek 的爆火出圈，到近期 Manus 的刷屏热议，AI 领域的发展可谓是日新月异。例如，DeepSeek R1 的出现，让人们开始接受慢思考，可我们同样注意到，OpenAI 的 Deep Research 选择了一条和 R1 截然不同的路线，模型与智能体之间的界限开始变得模糊。对于这一点，使用过 Cursor Composer 或者 Deep Research 的朋友，相信你们会有更深刻的感悟。有人说，Agent 会成为 2025 年的 AI 主旋律。我不知道大家是否清楚 AutoGPT 与 Manus 的差别，对我个人而言，最重要的事情是在喧嚣过后找到 “值得亲手去做的事情”。所以，今天这篇博客，我想分享一个 “熟悉而陌生” 的东西：MCP，即：模型上下文协议，并尝试将这个协议和 Semantic Kernel 连接起来。
MCP 介绍 [TL;DR] MCP 是由 Anthropic 设计的开放协议，其定位类似于 AI 领域的 USB 接口，旨在通过统一接口解决大模型连接不同数据源和工具的问题。该协议通过 JSON-RPC 规范定义了 Prompt 管理、资源访问和工具调用三大核心能力，使得任何支持 Function Calling 的模型都能无缝对接外部系统，从而帮助大语言模型实现 “万物互联”。
什么是 MCP? MCP（Model Context Protocol）是由 Anthropic 设计的一种开放协议，旨在标准化应用程序向大语言模型（LLMs）提供上下文的方式，使大模型能够以统一的方法连接各种数据源和工具。你可以将其理解为 AI 应用的 USB 接口，为 AI 模型连接到不同的数据源和工具提供了标准化的方法。架构设计上，MCP 采用了经典的 C/S 架构，客户端可以使用该协议灵活地连接多个 MCP Server，从而获取丰富的数据和功能支持，如下图所示：</description></item></channel></rss>